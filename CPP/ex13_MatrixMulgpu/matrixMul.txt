
#include <stdio.h>
#include <assert.h>

#include <cuda_runtime.h>

#define BLOCK_SIZE 32
#define VAL_A      (1.f)
#define VAL_B      (2.f)

//#define DUMP_VALUE

__global__ void matrixMulCUDA(float *C, float *A, float *B, int N, int pitchA, int pitchB)
{
    int x = blockIdx.x * blockDim.x + threadIdx.x;
    int y = blockIdx.y * blockDim.y + threadIdx.y;

    float Csub = 0.f;
    for (int k = 0; k < N; ++k)
    {
        Csub += A[y * pitchA + k] * B[k * pitchB + x];
    }

    C[y * pitchB + x] = Csub;
}

void constantInit(float *data, int size, float val)
{
    for (int i = 0; i < size; ++i)
    {
        data[i] = val;
    }
}

/**
 * Run a simple test of matrix multiplication using CUDA
 */
int matrixMultiply(dim3 &dimsA, dim3 &dimsB)
{
    // Allocate host memory for matrices A and B
    unsigned int size_A = dimsA.x * dimsA.y;
    unsigned int mem_size_A = sizeof(float) * size_A;
    float *h_A = (float *)malloc(mem_size_A);
    unsigned int size_B = dimsB.x * dimsB.y;
    unsigned int mem_size_B = sizeof(float) * size_B;
    float *h_B = (float *)malloc(mem_size_B);

    // Initialize host memory
    constantInit(h_A, size_A, VAL_A);
    constantInit(h_B, size_B, VAL_B);

#ifdef DUMP_VALUE
        FILE *fp = fopen("a.txt", "w+");
        for (int y = 0; y < (int)dimsA.y; y++) {
            for (int x = 0; x < (int)dimsA.x; x++) {
                fprintf(fp, "%0.6f\t", h_A[y * dimsA.x + x]);
            }
            fprintf(fp, "\n");
        }

        fp = fopen("b.txt", "w+");
        for (int y = 0; y < (int)dimsB.y; y++) {
            for (int x = 0; x < (int)dimsB.x; x++) {
                fprintf(fp, "%0.6f\t", h_B[y * dimsB.x + x]);
            }
            fprintf(fp, "\n");
        }
#endif

    // Allocate device memory
    float *d_A, *d_B, *d_C;

    // Allocate host matrix C
    dim3 dimsC(dimsB.x, dimsA.y, 1);
    unsigned int mem_size_C = dimsC.x * dimsC.y * sizeof(float);
    float *h_C = (float *) malloc(mem_size_C);
    
    cudaError_t error = cudaSuccess;

    if (NULL == h_C) { 
        printf("Failed to allocate host memory\n"); 
        exit(EXIT_FAILURE);
    }

    if (cudaSuccess != (error = cudaMalloc((void **)&d_A, mem_size_A))) {
        printf("cudaMalloc returned error %s\n", cudaGetErrorString(error));
        exit(EXIT_FAILURE);
    }

    if (cudaSuccess != (cudaMalloc((void **)&d_B, mem_size_B))) {
        printf("cudaMalloc returned error %s\n", cudaGetErrorString(error));
        exit(EXIT_FAILURE);
    }

    if (cudaSuccess != (cudaMalloc((void **)&d_C, mem_size_C))) {
        printf("cudaMalloc returned error %s\n", cudaGetErrorString(error));
        exit(EXIT_FAILURE);
    }

    // copy host memory to device
    if (cudaSuccess != (error = cudaMemcpy(d_A, h_A, mem_size_A, cudaMemcpyHostToDevice))) {
        printf("cudaMemcpy returned error %s\n", cudaGetErrorString(error));
        exit(EXIT_FAILURE);
    }

    if (cudaSuccess != (cudaMemcpy(d_B, h_B, mem_size_B, cudaMemcpyHostToDevice))) {
        printf("cudaMemcpy returned error %s\n", cudaGetErrorString(error));
        exit(EXIT_FAILURE);
    }

    // Setup execution parameters
    dim3 threads(BLOCK_SIZE, BLOCK_SIZE);
    dim3 grid(dimsB.x / threads.x, dimsA.y / threads.y);

    // Create and start timer
    printf("\nComputing started using CUDA Kernel...\n");

    // Allocate CUDA events that we'll use for timing
    cudaEvent_t start, stop;
    if (cudaSuccess != (error = cudaEventCreate(&start))) {
        printf("cudaEventCreate error code %s\n", cudaGetErrorString(error));
        exit(EXIT_FAILURE);
    }

    if (cudaSuccess != (error = cudaEventCreate(&stop))) {
        printf("cudaEventCreate error code %s\n", cudaGetErrorString(error));
        exit(EXIT_FAILURE);
    }

    // Record the start event
    if (cudaSuccess != (error = cudaEventRecord(start, NULL))) {
        printf("cudaEventRecord error code %s\n", cudaGetErrorString(error));
        exit(EXIT_FAILURE);
    }

    // Execute the kernel
    int nIter = 1;

    for (int j = 0; j < nIter; j++){
        matrixMulCUDA<<< grid, threads >>>(d_C, d_A, d_B, dimsC.y, dimsA.x, dimsB.x);
    }
    cudaDeviceSynchronize();

    // Record the stop event
    if (cudaSuccess != (error = cudaEventRecord(stop, NULL))) {
        printf("cudaEventRecord error code %s\n", cudaGetErrorString(error));
        exit(EXIT_FAILURE);
    }

    // Wait for the stop event to complete
    if (error != cudaSuccess != (error = cudaEventSynchronize(stop))) {
        printf("cudaEventSynchronize error code %s\n", cudaGetErrorString(error));
        exit(EXIT_FAILURE);
    }

    float msecTotal = 0.0f;
    if (cudaSuccess != (error = cudaEventElapsedTime(&msecTotal, start, stop))) {
        printf("cudaEventElapsedTime error code %s\n", cudaGetErrorString(error));
        exit(EXIT_FAILURE);
    }

    // Compute and print the performance
    float msecPerMatrixMul = msecTotal / nIter;
    printf("Time taken for this operaion: %.3f millisecond\n", msecPerMatrixMul);

    // Copy result from device to host
    if (error != cudaSuccess != (error = cudaMemcpy(h_C, d_C, mem_size_C, cudaMemcpyDeviceToHost))) {
        printf("cudaMemcpy error code %s\n", cudaGetErrorString(error));
        exit(EXIT_FAILURE);
    }

#ifdef DUMP_VALUE
        fp = fopen("c.txt", "w+");
        for (int y = 0; y < (int)dimsC.y; y++) {
            for (int x = 0; x < (int)dimsC.x; x++) {
                fprintf(fp, "%0.6f\t", h_C[y * dimsC.x + x]);
            }
            fprintf(fp, "\n");
        }
#endif

    printf("\nChecking computed result for correctness");
    bool correct = true;
    for (int i = 0; i < (int)(dimsC.x * dimsC.y); i++) {
        double abs_err = fabs(h_C[i] - (dimsA.x * VAL_B));

        if (abs_err != 0.0) {
            printf("Error! Matrix[%05d]=%.8f\n", i, h_C[i]);
            correct = false;
        }
    }

    printf("\nRESULT: %s\n", correct == true ? "PASS" : "FAIL");

    // Clean up memory
    free(h_A);
    free(h_B);
    free(h_C);
    cudaFree(d_A);
    cudaFree(d_B);
    cudaFree(d_C);

    return EXIT_SUCCESS;
}

int main(int argc, char **argv)
{
    cudaError_t error;
    cudaDeviceProp deviceProp;

    int devID = 0;
    if (cudaSuccess != (error = cudaGetDevice(&devID))) {
        printf("cudaGetDevice returned error %s (code %d), line(%d)\n", cudaGetErrorString(error), error, __LINE__);
    }

    if (cudaSuccess != (error = cudaGetDeviceProperties(&deviceProp, devID))) {
        printf("cudaGetDeviceProperties returned error %s (code %d), line(%d)\n", cudaGetErrorString(error), error, __LINE__);
    }
    
    printf("GPU Device %d: \"%s\" with compute capability %d.%d\n\n", devID, deviceProp.name, deviceProp.major, deviceProp.minor);

    dim3 dimsA(10 * BLOCK_SIZE, 10 * BLOCK_SIZE, 1);
    dim3 dimsB(20 * BLOCK_SIZE, 10 * BLOCK_SIZE, 1);

    printf("Perform multiplication of MatrixA(%d,%d) & MatrixB(%d,%d)\n", dimsA.x, dimsA.y, dimsB.x, dimsB.y);

    int retval = matrixMultiply(dimsA, dimsB);

    return retval;
}

#if 0
//matrix multiplication using shared memory
__global__ void matrixMulCUDA2(float *C, float *A, float *B, int wA, int wB)
{
    // Block index
    int bx = blockIdx.x;
    int by = blockIdx.y;

    // Thread index
    int tx = threadIdx.x;
    int ty = threadIdx.y;

    // Index of the first sub-matrix of A processed by the block
    int aBegin = wA * BLOCK_SIZE * by;

    // Index of the last sub-matrix of A processed by the block
    int aEnd   = aBegin + wA - 1;

    // Step size used to iterate through the sub-matrices of A
    int aStep  = BLOCK_SIZE;

    // Index of the first sub-matrix of B processed by the block
    int bBegin = BLOCK_SIZE * bx;

    // Step size used to iterate through the sub-matrices of B
    int bStep  = BLOCK_SIZE * wB;

    // Csub is used to store the element of the block sub-matrix
    // that is computed by the thread
    float Csub = 0;

    // Loop over all the sub-matrices of A and B
    // required to compute the block sub-matrix
    for (int a = aBegin, b = bBegin;
         a <= aEnd;
         a += aStep, b += bStep)
    {

        // Declaration of the shared memory array As used to
        // store the sub-matrix of A
        __shared__ float As[BLOCK_SIZE][BLOCK_SIZE];

        // Declaration of the shared memory array Bs used to
        // store the sub-matrix of B
        __shared__ float Bs[BLOCK_SIZE][BLOCK_SIZE];

        // Load the matrices from device memory
        // to shared memory; each thread loads
        // one element of each matrix
        As[ty][tx] = A[a + wA * ty + tx];
        Bs[ty][tx] = B[b + wB * ty + tx];

        // Synchronize to make sure the matrices are loaded
        __syncthreads();

        // Multiply the two matrices together;
        // each thread computes one element
        // of the block sub-matrix
#pragma unroll

        for (int k = 0; k < BLOCK_SIZE; ++k)
        {
            Csub += As[ty][k] * Bs[k][tx];
        }

        // Synchronize to make sure that the preceding
        // computation is done before loading two new
        // sub-matrices of A and B in the next iteration
        __syncthreads();
    }

    // Write the block sub-matrix to device memory;
    // each thread writes one element
    int c = wB * BLOCK_SIZE * by + BLOCK_SIZE * bx;
    C[c + wB * ty + tx] = Csub;
}
#endif